/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.75
 * Generated at: 2022-05-21 11:29:47 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views.member;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class managerJoin_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(2);
    _jspx_dependants.put("jar:file:/C:/workspace/workspace_hgw_spring/.metadata/.plugins/org.eclipse.wst.server.core/tmp0/wtpwebapps/team0/WEB-INF/lib/spring-security-taglibs-5.0.7.RELEASE.jar!/META-INF/security.tld", Long.valueOf(1532606274000L));
    _jspx_dependants.put("/WEB-INF/lib/spring-security-taglibs-5.0.7.RELEASE.jar", Long.valueOf(1651151418248L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005fsec_005fcsrfInput_005fnobody;

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
    _005fjspx_005ftagPool_005fsec_005fcsrfInput_005fnobody = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
  }

  public void _jspDestroy() {
    _005fjspx_005ftagPool_005fsec_005fcsrfInput_005fnobody.release();
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html lang=\"ko\">\r\n");
      out.write("   	<head>\r\n");
      out.write("		<!-- <meta name=\"google-signin-client_id\" content=\"347160871077-577pujh4td24j5iv9dog5kp903esu6rh.apps.googleusercontent.com\"> -->\r\n");
      out.write("    	");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "../common/head.jsp", out, false);
      out.write("\r\n");
      out.write("      \r\n");
      out.write("   </head>\r\n");
      out.write("   <!-- body -->\r\n");
      out.write("   <body class=\"main-layout\">\r\n");
      out.write("     ");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "../common/nav.jsp", out, false);
      out.write("\r\n");
      out.write("      <!-- loader  -->\r\n");
      out.write("    <!--   <div class=\"loader_bg\">\r\n");
      out.write("         <div class=\"loader\"><img src=\"/resources/assets/images/loading.gif\" alt=\"#\" /></div>\r\n");
      out.write("      </div> -->\r\n");
      out.write("      <!-- end loader -->\r\n");
      out.write(" \r\n");
      out.write("      <!-- banner -->\r\n");
      out.write("      <section class=\"banner_main\">\r\n");
      out.write("         <div class=\"container\">\r\n");
      out.write("	        <div class=\"row d_flex \">\r\n");
      out.write("	        <div class=\"col-md-6\" >\r\n");
      out.write("               <div class=\"text-bg\">\r\n");
      out.write("                  <h1>저기압일땐<br>\r\n");
      out.write("					  고기앞으로<br>\r\n");
      out.write("					  가기위해 -></h1>\r\n");
      out.write("                  <h3>★ 집밥귱선생님의 오마카세 ㅎㅅㅎ ★</h3>\r\n");
      out.write("               </div>\r\n");
      out.write("            </div>\r\n");
      out.write("	            <div class=\"col-md-6\" style=\"margin-top: 70px;\">\r\n");
      out.write("	               <form id=\"request\" class=\"main_form align-items-center \" method=\"post\" name=\"frm\">\r\n");
      out.write("	                  <div class=\"row input-group\">\r\n");
      out.write("	                     <div class=\"col-md-12 \">\r\n");
      out.write("							<span id=\"idError\"></span>\r\n");
      out.write("							<label for=\"id\">아이디</label>\r\n");
      out.write("	                        <input class=\"contactus mb-5 check\" placeholder=\"아이디\" type=\"text\" id=\"id\" name=\"id\">\r\n");
      out.write("	                     </div>\r\n");
      out.write("	                     <div class=\"col-md-12 list\">\r\n");
      out.write("							<span id=\"pwError\"></span>\r\n");
      out.write("							<label for=\"password\">비밀번호</label>\r\n");
      out.write("	                        <input class=\"contactus mb-5 check\" placeholder=\"비밀번호\" id=\"pw\" type=\"password\" name=\"password\">\r\n");
      out.write("	                     </div>\r\n");
      out.write("	                     <div class=\"col-md-12 list\">\r\n");
      out.write("							<span id=\"pwCheckError\"></span>\r\n");
      out.write("							<label for=\"password\">비밀번호확인</label>\r\n");
      out.write("	                        <input class=\"contactus mb-5 check\" placeholder=\"비밀번호 확인\" type=\"password\" id=\"pwCheck\" name=\"password2\">\r\n");
      out.write("	                     </div>\r\n");
      out.write("	                     <div class=\"col-md-12 list\">\r\n");
      out.write("							<span id=\"nameError\"></span>\r\n");
      out.write("							<label for=\"name\">이름</label>\r\n");
      out.write("	                        <input class=\"contactus mb-5 check\" placeholder=\"이름\" type=\"text\" name=\"name\" id=\"name\">\r\n");
      out.write("	                     </div>\r\n");
      out.write("	                     <div class=\"col-md-12 list\">\r\n");
      out.write("							<span id=\"phoneNumError\"></span>\r\n");
      out.write("							<label for=\"phoneNum\">전화번호(-빼고 입력해주세요)</label>\r\n");
      out.write("	                        <input class=\"contactus mb-5 check\" placeholder=\"전화번호(-빼고 입력해주세요)\" type=\"text\" name=\"tel\" id=\"phoneNum\">\r\n");
      out.write("	                     </div>\r\n");
      out.write("	                     <div class=\"col-md-12 list\">\r\n");
      out.write("							<span id=\"emailError\"></span>\r\n");
      out.write("							<label for=\"email\">이메일</label>\r\n");
      out.write("	                        <input class=\"contactus mb-5 check\" placeholder=\"이메일\" type=\"email\" name=\"email\" id=\"email\">\r\n");
      out.write("	                     </div>\r\n");
      out.write("	                     <div class=\"col-md-12 \">\r\n");
      out.write("							<label for=\"owner\">대표자 이름</label>\r\n");
      out.write("	                        <input class=\"contactus mb-5\" placeholder=\"대표자 이름\" type=\"text\" name=\"bossName\">\r\n");
      out.write("	                     </div>\r\n");
      out.write("	                     <div class=\"col-md-12 \">\r\n");
      out.write("							<label for=\"owner\">사업자번호</label>\r\n");
      out.write("	                        <input class=\"contactus mb-5\" placeholder=\"사업자번호\" type=\"text\" name=\"bno\">\r\n");
      out.write("	                     </div>\r\n");
      out.write("						\r\n");
      out.write("						");
      if (_jspx_meth_sec_005fcsrfInput_005f0(_jspx_page_context))
        return;
      out.write("\r\n");
      out.write("	                    <div class=\"col-sm-12\">\r\n");
      out.write("	                        <button class=\"btn btn-block send_btn\" id=\"send_btn\">회원가입</button>\r\n");
      out.write("	                    </div>\r\n");
      out.write("	                 </div>\r\n");
      out.write("	              </form>\r\n");
      out.write("	           </div>\r\n");
      out.write("	        </div>\r\n");
      out.write("         </div>\r\n");
      out.write("      </section>\r\n");
      out.write("      <!-- end banner -->\r\n");
      out.write("\r\n");
      out.write("      <!--  footer -->\r\n");
      out.write("      <footer>\r\n");
      out.write("         ");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "../common/footer.jsp", out, false);
      out.write("\r\n");
      out.write("      </footer>\r\n");
      out.write("      <!-- end footer -->\r\n");
      out.write("      \r\n");
      out.write("      <script>\r\n");
      out.write("		window.onload = function() {\r\n");
      out.write("			var frm = document.frm;\r\n");
      out.write("			var input = document.querySelectorAll('.check')\r\n");
      out.write("\r\n");
      out.write("			var errorId = [\"idError\", \"pwError\", \"pwCheckError\", \"nameError\", \"phoneNumError\", \"emailError\"];\r\n");
      out.write("			var error = document.querySelectorAll('.list > span')\r\n");
      out.write("\r\n");
      out.write("			function innerReset(error) {\r\n");
      out.write("				for(var i = 0; i < error.length; i++) {\r\n");
      out.write("					error[i].innerHTML = \"\";\r\n");
      out.write("				}\r\n");
      out.write("			}\r\n");
      out.write("\r\n");
      out.write("			innerReset(error);\r\n");
      out.write("\r\n");
      out.write("			// 아이디 입력문자 유효성검사\r\n");
      out.write("			frm.id.onkeyup = function() {\r\n");
      out.write("				innerReset(error);\r\n");
      out.write("				var idLimit = /^[a-zA-Z0-9-_]{5,20}$/; //정규식 5~20자 (a~z, A~Z, 0~9, -, _만 입력가능)\r\n");
      out.write("				if(!idLimit.test(input[0].value)) {\r\n");
      out.write("					document.getElementById(errorId[0]).innerHTML = \"5~20자의 영문 소대문자, 숫자와 특수기호(_),(-)만 사용 가능합니다.\";\r\n");
      out.write("				}\r\n");
      out.write("			}\r\n");
      out.write("\r\n");
      out.write("			// 비밀번호 입력문자 유효성검사\r\n");
      out.write("			frm.pw.onkeyup = function() {\r\n");
      out.write("				innerReset(error);\r\n");
      out.write("				var pwLimit = /^[a-zA-Z0-9~!@#$%^&*()_-]{8,20}$/; //정규식(a~z, A~Z, 0~9, ~!@#$%^&*()_- 만 입력가능)\r\n");
      out.write("				if(!pwLimit.test(input[1].value)) {\r\n");
      out.write("					document.getElementById(errorId[1]).innerHTML = \"8~20자의 영문 소대문자, 숫자와 특수기호 '~!@#$%^&*()_-'만 사용 가능합니다.\";\r\n");
      out.write("				}\r\n");
      out.write("			}\r\n");
      out.write("			// 비밀번호 확인 입력문자 유효성검사\r\n");
      out.write("			frm.pwCheck.onkeyup = function() {\r\n");
      out.write("				innerReset(error);\r\n");
      out.write("			}\r\n");
      out.write("\r\n");
      out.write("			// 휴대번호 입력문자 유효성검사\r\n");
      out.write("			frm.phoneNum.onkeyup = function() {\r\n");
      out.write("				innerReset(error);\r\n");
      out.write("				var pnumLimit = /^[0-9]*$/ // 정규식(^$--> 문자의미, 01, (6자리중 \"1자리\"), 0~9--> \"8자리\")\r\n");
      out.write("				if(!pnumLimit.test(input[4].value)) {\r\n");
      out.write("					document.getElementById(errorId[4]).innerHTML = \"올바른 형식이 아닙니다. 다시 확인해주세요.\";\r\n");
      out.write("				}\r\n");
      out.write("			}\r\n");
      out.write("\r\n");
      out.write("			frm.email.onkeyup = function() {\r\n");
      out.write("				innerReset(error);\r\n");
      out.write("				var emailLimit = /[0-9a-zA-Z-@_.]/; // 정규식 0~9, a~z, A~Z, -, _, .내에서만 입력가능\r\n");
      out.write("				if(!emailLimit.test(input[5].value)) {\r\n");
      out.write("					document.getElementById(errorId[5]).innerHTML = \"올바른 형식이 아닙니다. 영문, 숫자, (-)(_)(.) 입력만 가능합니다.\";\r\n");
      out.write("				}\r\n");
      out.write("			}\r\n");
      out.write("\r\n");
      out.write("			frm.onsubmit = function() {\r\n");
      out.write("				var errorStr = [\" 아이디를\", \" 비밀번호를\", \" 비밀번호 확인을\", \" 성함을\", \" 휴대폰번호를\", \" 이메일을\"];\r\n");
      out.write("				innerReset(error);\r\n");
      out.write("				for(var i = 0; i < input.length - 1; i++) {\r\n");
      out.write("					if(!input[i].value) {\r\n");
      out.write("						document.getElementById(errorId[i]).innerHTML = errorStr[i] + \" 입력해 주세요.\";\r\n");
      out.write("						input[i].focus();\r\n");
      out.write("						return false;\r\n");
      out.write("					}\r\n");
      out.write("				}\r\n");
      out.write("				if(frm.pw.value != frm.pwCheck.value) {\r\n");
      out.write("					document.getElementById(\"pwCheckError\").innerHTML = \"비밀번호가 일치하지 않습니다.\";\r\n");
      out.write("					frm.pwCheck.focus();\r\n");
      out.write("					return false;\r\n");
      out.write("				}\r\n");
      out.write("\r\n");
      out.write("				var idLimit = /^[a-zA-Z0-9-_]{5,20}$/; //정규식(a~z, A~Z, 0~9, -, _만 입력가능)\r\n");
      out.write("				var pwLimit = /^[a-zA-Z0-9~!@#$%^&*()_-]{8,20}$/;///[a-zA-Z0-9]{10, 20}/; //정규식(a~z, A~Z, 0~9,~!@#$%^&*()_-특수문자 만 입력가능)\r\n");
      out.write("				var pnumLimit = /^[0-9]*$/ // 01로 시작, 0,1,6,7,8,9 중 한자리, 0~9에서 8자리 입력\r\n");
      out.write("				var emailLimit = /[0-9a-zA-Z-_.]/; // 정규식 0~9, a~z, A~Z, -, _, .내에서만 입력가능\r\n");
      out.write("\r\n");
      out.write("				if(!idLimit.test(input[0].value)) {\r\n");
      out.write("					document.getElementById(errorId[0]).innerHTML = \"5~20자의 영문 소대문자, 숫자와 특수기호(_),(-)만 사용 가능합니다.\";\r\n");
      out.write("					console.log(input[0].value);\r\n");
      out.write("					frm.id.focus();\r\n");
      out.write("					return false;\r\n");
      out.write("				}\r\n");
      out.write("\r\n");
      out.write("				if(!pwLimit.test(input[1].value)) {\r\n");
      out.write("					document.getElementById(errorId[1]).innerHTML = \"8~20자의 영문 소대문자, 숫자와 특수기호 '~!@#$%^&*()_-'만 사용 가능합니다.\";\r\n");
      out.write("					console.log(input[1].value);\r\n");
      out.write("					frm.pw.focus();\r\n");
      out.write("					return false;\r\n");
      out.write("				}\r\n");
      out.write("\r\n");
      out.write("				if(!pnumLimit.test(input[4].value)) {\r\n");
      out.write("					document.getElementById(errorId[4]).innerHTML = \"올바른 형식이 아닙니다. 다시 확인해주세요.\";\r\n");
      out.write("					console.log(input[4].value);\r\n");
      out.write("					frm.phoneNum.focus();\r\n");
      out.write("					return false;\r\n");
      out.write("				}\r\n");
      out.write("				\r\n");
      out.write("				if(!emailLimit.test(input[5].value)) {\r\n");
      out.write("					document.getElementById(errorId[5]).innerHTML = \"올바른 형식이 아닙니다. 영문, 숫자, (-)(_)(.) 입력만 가능합니다.\";\r\n");
      out.write("					console.log(input[5].value);\r\n");
      out.write("					frm.email.focus();\r\n");
      out.write("					return false;\r\n");
      out.write("				}\r\n");
      out.write("				alert(\"회원가입이 완료되었습니다! :D\")\r\n");
      out.write("			}\r\n");
      out.write("\r\n");
      out.write("		} \r\n");
      out.write("      </script>\r\n");
      out.write("   	\r\n");
      out.write("		\r\n");
      out.write("   </body>\r\n");
      out.write("</html>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }

  private boolean _jspx_meth_sec_005fcsrfInput_005f0(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  sec:csrfInput
    org.springframework.security.taglibs.csrf.CsrfInputTag _jspx_th_sec_005fcsrfInput_005f0 = (org.springframework.security.taglibs.csrf.CsrfInputTag) _005fjspx_005ftagPool_005fsec_005fcsrfInput_005fnobody.get(org.springframework.security.taglibs.csrf.CsrfInputTag.class);
    boolean _jspx_th_sec_005fcsrfInput_005f0_reused = false;
    try {
      _jspx_th_sec_005fcsrfInput_005f0.setPageContext(_jspx_page_context);
      _jspx_th_sec_005fcsrfInput_005f0.setParent(null);
      int _jspx_eval_sec_005fcsrfInput_005f0 = _jspx_th_sec_005fcsrfInput_005f0.doStartTag();
      if (_jspx_th_sec_005fcsrfInput_005f0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
      _005fjspx_005ftagPool_005fsec_005fcsrfInput_005fnobody.reuse(_jspx_th_sec_005fcsrfInput_005f0);
      _jspx_th_sec_005fcsrfInput_005f0_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_sec_005fcsrfInput_005f0, _jsp_getInstanceManager(), _jspx_th_sec_005fcsrfInput_005f0_reused);
    }
    return false;
  }
}
