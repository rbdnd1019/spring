package com.inadang.controller;


import java.io.UnsupportedEncodingException;
import java.security.Principal;
import java.util.ArrayList;
import java.util.List;

import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import com.inadang.domain.Criteria;
import com.inadang.domain.MemberVO;
import com.inadang.domain.PageDTO;
import com.inadang.domain.Payment;
import com.inadang.domain.Store;
import com.inadang.service.MemberService;
import com.inadang.service.OrderMenuService;
import com.inadang.service.OrderService;
import com.inadang.service.PaymentService;
import com.inadang.service.StoreService;

import lombok.AllArgsConstructor;
import lombok.extern.log4j.Log4j;

@Controller
@RequestMapping("member/*")
@AllArgsConstructor
@Log4j
public class MemberController {
	private MemberService memberService;
	private StoreService storeService;
	private PaymentService paymentService;
	private OrderService orderService;
	private OrderMenuService orderMenuService;
	
	@GetMapping("login")
	public void login(@ModelAttribute String error,@ModelAttribute String logout) {
		
	}
	
	@PostMapping("login")
	public String login() {
		return "/redirect:/index";
	}
	
	@GetMapping("join")
	public void join() {
		
	}
	
	@PostMapping("join")
	public String join(MemberVO vo) {
		log.info(vo.getId());
		log.info(vo);
		memberService.join(vo);
		return "redirect:/member/login";
	}
	
	@GetMapping({"notice", "get"})
	public void notice(Principal principal, Model model) {
		model.addAttribute("member", memberService.get(principal.getName()));
	}
	
	@GetMapping({"modify", "get"})
	@PreAuthorize("isAuthenticated()")
	public void modify(Principal principal, Model model) {
		model.addAttribute("member", memberService.get(principal.getName()));
	}
	
	@GetMapping("like")
	public void like(Model model, Principal principal) {
		List<Long> snos = storeService.listLike(principal.getName());
		List<Store> stores = new ArrayList<Store>();
		for(Long sno : snos) {
			stores.add(storeService.get(sno));
		}
		for(Store s : stores) {
			if(storeService.getLogo(s.getSno()) != null) {
				s.setLogo(storeService.getLogo(s.getSno()).getOrigin());
			}
		}
		model.addAttribute("stores", stores);
	}
	@PostMapping("modify")
	@PreAuthorize("isAuthenticated() and principal.username == #memberVO.id")
	public String modify(MemberVO memberVO, RedirectAttributes rttr) {
		log.info("과연 : " + memberVO);
		if(memberService.modify(memberVO)) {
			rttr.addFlashAttribute("result", "수정");
		}
		return "redirect:/member/notice";
	}
	
	@GetMapping("memberAuth") @ResponseBody 
	public String memberAuth(String id, String email) throws UnsupportedEncodingException, IllegalArgumentException {
		log.info(email);
		log.info(id);
		memberService.emailAuth(id, email);
		return "success";
	}
	
	@GetMapping("procAuth") 
	public String procAuth(String id, RedirectAttributes rttr, String authToken ) {
		log.info("진짜 " +id);
		log.info("어렵다... " +authToken);
		rttr.addFlashAttribute("result", memberService.emailAuthToken(id, authToken));
		return "redirect:/member/notice";
	}
	
	
	
	/*@RequestMapping(value="/memberIdChk", method=RequestMethod.POST)
	@ResponseBody
	public String memberIdChk(String id) {
		int result = memberService.idCheck(id);
		log.info("아이디 : " + result);
		if(result != 0) {
			return "fail";
		}
		else {
			return "success";
		}
	}*/

	
	@GetMapping("orderHistory")
	public void orderHistory(Principal principal, Model model, Criteria cri) {
		List<Payment> payments = paymentService.get(principal.getName());
		for(Payment p : payments) {
			p.setOrd(orderService.get(p.getOno()));
			p.setOrderMenus(orderMenuService.findBy(p.getOno()));
		}
		
		model.addAttribute("history", payments);
//		model.addAttribute("page", new PageDTO(, cri))
	}
}
